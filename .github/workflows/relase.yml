name: Build & Release

on:
  push:
    tags:
      - 'v*' 

jobs:
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: "Run tests"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt update && sudo apt install -y cmake g++ ninja-build unzip

      - name: Configure project
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G Ninja

      - name: Build
        run: cmake --build build

      - name: Run tests
        working-directory: build
        run: ctest --output-on-failure


  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release (draft)
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  package:
    name: Build and upload packages
    needs: release
    strategy:
      matrix:
        os: [ubuntu, windows, fedora]
        include:
          - os: ubuntu
            runs_on: ubuntu-latest
            cpack_ext: ".deb"
          - os: windows
            runs_on: windows-latest
            cpack_ext: ".exe"
          - os: fedora
            runs_on: ubuntu-latest
            cpack_ext: ".rpm"
            container: fedora:latest
    runs-on: ${{ matrix.runs_on }}
    container:
      image: ${{ matrix.container }}
      options: --privileged  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu'
        run: |
          sudo apt update
          sudo apt install -y cmake g++ ninja-build rpm dpkg

      - name: Install dependencies (Fedora)
        if: matrix.os == 'fedora'
        run: |
          dnf install -y cmake gcc-c++ ninja-build rpm-build unzip git 

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows'
        uses: aminya/setup-cpp@v1
        with:
          compiler: cl
          cmake: true
          ninja: true

      - name: Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G Ninja

      - name: Build
        run: cmake --build build

      - name: Package
        run: cmake --build build --target package

      - name: Upload package to release
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: build/*${{ matrix.cpack_ext }}
          overwrite: true

